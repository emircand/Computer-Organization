module mod_dp(
    input clk,
    input [31:0] A,
    input [31:0] B,
    input load_temp,   // Control signal to load A into TEMP
    input subtract,    // Control signal to subtract B from TEMP
    input we,          // Control signal to write TEMP to RESULT
    output reg [31:0] RESULT,  // Output RESULT
    output temp_lt_b   // Flag for TEMP < B
);

reg [31:0] TEMP;
wire [31:0] temp_next;
wire [31:0] sub_result;

// Define the subtraction operation
assign sub_result = TEMP - B;

// Define the next value for TEMP using a multiplexer
// If load_temp is high, TEMP takes the value of A.
// If subtract is high and TEMP is greater than or equal to B, TEMP takes the value of sub_result.
// Otherwise, TEMP retains its current value.
assign temp_next = load_temp ? A : (subtract && TEMP >= B ? sub_result : TEMP);

// Update TEMP and RESULT with clocked logic
always @(posedge clk) begin
    TEMP <= temp_next;
    
    if (we) begin
        RESULT <= TEMP;
    end
end

// Comparison for TEMP < B
assign temp_lt_b = (TEMP < B);

endmodule
